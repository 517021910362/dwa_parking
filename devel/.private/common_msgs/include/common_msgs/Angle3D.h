// Generated by gencpp from file common_msgs/Angle3D.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_ANGLE3D_H
#define COMMON_MSGS_MESSAGE_ANGLE3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct Angle3D_
{
  typedef Angle3D_<ContainerAllocator> Type;

  Angle3D_()
    : heading(0.0)
    , pitch(0.0)
    , roll(0.0)  {
    }
  Angle3D_(const ContainerAllocator& _alloc)
    : heading(0.0)
    , pitch(0.0)
    , roll(0.0)  {
  (void)_alloc;
    }



   typedef float _heading_type;
  _heading_type heading;

   typedef float _pitch_type;
  _pitch_type pitch;

   typedef float _roll_type;
  _roll_type roll;





  typedef boost::shared_ptr< ::common_msgs::Angle3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::Angle3D_<ContainerAllocator> const> ConstPtr;

}; // struct Angle3D_

typedef ::common_msgs::Angle3D_<std::allocator<void> > Angle3D;

typedef boost::shared_ptr< ::common_msgs::Angle3D > Angle3DPtr;
typedef boost::shared_ptr< ::common_msgs::Angle3D const> Angle3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::Angle3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::Angle3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::Angle3D_<ContainerAllocator1> & lhs, const ::common_msgs::Angle3D_<ContainerAllocator2> & rhs)
{
  return lhs.heading == rhs.heading &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::Angle3D_<ContainerAllocator1> & lhs, const ::common_msgs::Angle3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Angle3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Angle3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Angle3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Angle3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Angle3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Angle3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::Angle3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a0a24f94640b168577ac5c59871cb550";
  }

  static const char* value(const ::common_msgs::Angle3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa0a24f94640b1685ULL;
  static const uint64_t static_value2 = 0x77ac5c59871cb550ULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::Angle3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Angle3D";
  }

  static const char* value(const ::common_msgs::Angle3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::Angle3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 heading   # 航向角\n"
"float32 pitch   # 俯仰角\n"
"float32 roll # 横滚角\n"
;
  }

  static const char* value(const ::common_msgs::Angle3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::Angle3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.heading);
      stream.next(m.pitch);
      stream.next(m.roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Angle3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::Angle3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::Angle3D_<ContainerAllocator>& v)
  {
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_ANGLE3D_H
