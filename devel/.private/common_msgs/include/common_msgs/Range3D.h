// Generated by gencpp from file common_msgs/Range3D.msg
// DO NOT EDIT!


#ifndef COMMON_MSGS_MESSAGE_RANGE3D_H
#define COMMON_MSGS_MESSAGE_RANGE3D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace common_msgs
{
template <class ContainerAllocator>
struct Range3D_
{
  typedef Range3D_<ContainerAllocator> Type;

  Range3D_()
    : xMax(0.0)
    , xMin(0.0)
    , yMax(0.0)
    , yMin(0.0)
    , zMax(0.0)
    , zMin(0.0)  {
    }
  Range3D_(const ContainerAllocator& _alloc)
    : xMax(0.0)
    , xMin(0.0)
    , yMax(0.0)
    , yMin(0.0)
    , zMax(0.0)
    , zMin(0.0)  {
  (void)_alloc;
    }



   typedef float _xMax_type;
  _xMax_type xMax;

   typedef float _xMin_type;
  _xMin_type xMin;

   typedef float _yMax_type;
  _yMax_type yMax;

   typedef float _yMin_type;
  _yMin_type yMin;

   typedef float _zMax_type;
  _zMax_type zMax;

   typedef float _zMin_type;
  _zMin_type zMin;





  typedef boost::shared_ptr< ::common_msgs::Range3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::common_msgs::Range3D_<ContainerAllocator> const> ConstPtr;

}; // struct Range3D_

typedef ::common_msgs::Range3D_<std::allocator<void> > Range3D;

typedef boost::shared_ptr< ::common_msgs::Range3D > Range3DPtr;
typedef boost::shared_ptr< ::common_msgs::Range3D const> Range3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::common_msgs::Range3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::common_msgs::Range3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::common_msgs::Range3D_<ContainerAllocator1> & lhs, const ::common_msgs::Range3D_<ContainerAllocator2> & rhs)
{
  return lhs.xMax == rhs.xMax &&
    lhs.xMin == rhs.xMin &&
    lhs.yMax == rhs.yMax &&
    lhs.yMin == rhs.yMin &&
    lhs.zMax == rhs.zMax &&
    lhs.zMin == rhs.zMin;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::common_msgs::Range3D_<ContainerAllocator1> & lhs, const ::common_msgs::Range3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace common_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Range3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::common_msgs::Range3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Range3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::common_msgs::Range3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Range3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::common_msgs::Range3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::common_msgs::Range3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "440fcab4969f9ce8d62e2fe8adcf659a";
  }

  static const char* value(const ::common_msgs::Range3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x440fcab4969f9ce8ULL;
  static const uint64_t static_value2 = 0xd62e2fe8adcf659aULL;
};

template<class ContainerAllocator>
struct DataType< ::common_msgs::Range3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "common_msgs/Range3D";
  }

  static const char* value(const ::common_msgs::Range3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::common_msgs::Range3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 xMax\n"
"float32 xMin\n"
"float32 yMax\n"
"float32 yMin\n"
"float32 zMax\n"
"float32 zMin\n"
;
  }

  static const char* value(const ::common_msgs::Range3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::common_msgs::Range3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.xMax);
      stream.next(m.xMin);
      stream.next(m.yMax);
      stream.next(m.yMin);
      stream.next(m.zMax);
      stream.next(m.zMin);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Range3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::common_msgs::Range3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::common_msgs::Range3D_<ContainerAllocator>& v)
  {
    s << indent << "xMax: ";
    Printer<float>::stream(s, indent + "  ", v.xMax);
    s << indent << "xMin: ";
    Printer<float>::stream(s, indent + "  ", v.xMin);
    s << indent << "yMax: ";
    Printer<float>::stream(s, indent + "  ", v.yMax);
    s << indent << "yMin: ";
    Printer<float>::stream(s, indent + "  ", v.yMin);
    s << indent << "zMax: ";
    Printer<float>::stream(s, indent + "  ", v.zMax);
    s << indent << "zMin: ";
    Printer<float>::stream(s, indent + "  ", v.zMin);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMMON_MSGS_MESSAGE_RANGE3D_H
