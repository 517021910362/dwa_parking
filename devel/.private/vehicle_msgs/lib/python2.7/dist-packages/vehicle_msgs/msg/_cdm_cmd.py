# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/cdm_cmd.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class cdm_cmd(genpy.Message):
  _md5sum = "7b69952894d338c32418394971da76f8"
  _type = "vehicle_msgs/cdm_cmd"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 Veh_Mass
uint8 Front_Hydraulic_BrakeFd
uint8 Rear_Hydraulic_BrakeFd
uint8 DriveModeFd
uint8 Load_BrakeFd
#uint8 Compartment_Up
#uint8 Compartment_Down
#uint8 Compartment_UpHighest
#uint8 Compartment_UpLowest
uint8 Compartment_Fd
uint8 Vehicle_FaultLevel
float32 Veh_Spd
uint8 Fuel_Signal
uint16 Engine_Speed
int8 TCM_GearFd
uint32 Steer_fd
uint8 Lat_State"""
  __slots__ = ['Veh_Mass','Front_Hydraulic_BrakeFd','Rear_Hydraulic_BrakeFd','DriveModeFd','Load_BrakeFd','Compartment_Fd','Vehicle_FaultLevel','Veh_Spd','Fuel_Signal','Engine_Speed','TCM_GearFd','Steer_fd','Lat_State']
  _slot_types = ['uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32','uint8','uint16','int8','uint32','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Veh_Mass,Front_Hydraulic_BrakeFd,Rear_Hydraulic_BrakeFd,DriveModeFd,Load_BrakeFd,Compartment_Fd,Vehicle_FaultLevel,Veh_Spd,Fuel_Signal,Engine_Speed,TCM_GearFd,Steer_fd,Lat_State

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(cdm_cmd, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Veh_Mass is None:
        self.Veh_Mass = 0
      if self.Front_Hydraulic_BrakeFd is None:
        self.Front_Hydraulic_BrakeFd = 0
      if self.Rear_Hydraulic_BrakeFd is None:
        self.Rear_Hydraulic_BrakeFd = 0
      if self.DriveModeFd is None:
        self.DriveModeFd = 0
      if self.Load_BrakeFd is None:
        self.Load_BrakeFd = 0
      if self.Compartment_Fd is None:
        self.Compartment_Fd = 0
      if self.Vehicle_FaultLevel is None:
        self.Vehicle_FaultLevel = 0
      if self.Veh_Spd is None:
        self.Veh_Spd = 0.
      if self.Fuel_Signal is None:
        self.Fuel_Signal = 0
      if self.Engine_Speed is None:
        self.Engine_Speed = 0
      if self.TCM_GearFd is None:
        self.TCM_GearFd = 0
      if self.Steer_fd is None:
        self.Steer_fd = 0
      if self.Lat_State is None:
        self.Lat_State = 0
    else:
      self.Veh_Mass = 0
      self.Front_Hydraulic_BrakeFd = 0
      self.Rear_Hydraulic_BrakeFd = 0
      self.DriveModeFd = 0
      self.Load_BrakeFd = 0
      self.Compartment_Fd = 0
      self.Vehicle_FaultLevel = 0
      self.Veh_Spd = 0.
      self.Fuel_Signal = 0
      self.Engine_Speed = 0
      self.TCM_GearFd = 0
      self.Steer_fd = 0
      self.Lat_State = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7BfBHbIB().pack(_x.Veh_Mass, _x.Front_Hydraulic_BrakeFd, _x.Rear_Hydraulic_BrakeFd, _x.DriveModeFd, _x.Load_BrakeFd, _x.Compartment_Fd, _x.Vehicle_FaultLevel, _x.Veh_Spd, _x.Fuel_Signal, _x.Engine_Speed, _x.TCM_GearFd, _x.Steer_fd, _x.Lat_State))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.Veh_Mass, _x.Front_Hydraulic_BrakeFd, _x.Rear_Hydraulic_BrakeFd, _x.DriveModeFd, _x.Load_BrakeFd, _x.Compartment_Fd, _x.Vehicle_FaultLevel, _x.Veh_Spd, _x.Fuel_Signal, _x.Engine_Speed, _x.TCM_GearFd, _x.Steer_fd, _x.Lat_State,) = _get_struct_7BfBHbIB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7BfBHbIB().pack(_x.Veh_Mass, _x.Front_Hydraulic_BrakeFd, _x.Rear_Hydraulic_BrakeFd, _x.DriveModeFd, _x.Load_BrakeFd, _x.Compartment_Fd, _x.Vehicle_FaultLevel, _x.Veh_Spd, _x.Fuel_Signal, _x.Engine_Speed, _x.TCM_GearFd, _x.Steer_fd, _x.Lat_State))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.Veh_Mass, _x.Front_Hydraulic_BrakeFd, _x.Rear_Hydraulic_BrakeFd, _x.DriveModeFd, _x.Load_BrakeFd, _x.Compartment_Fd, _x.Vehicle_FaultLevel, _x.Veh_Spd, _x.Fuel_Signal, _x.Engine_Speed, _x.TCM_GearFd, _x.Steer_fd, _x.Lat_State,) = _get_struct_7BfBHbIB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7BfBHbIB = None
def _get_struct_7BfBHbIB():
    global _struct_7BfBHbIB
    if _struct_7BfBHbIB is None:
        _struct_7BfBHbIB = struct.Struct("<7BfBHbIB")
    return _struct_7BfBHbIB
