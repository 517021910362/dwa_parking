# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/vehicle_upload.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class vehicle_upload(genpy.Message):
  _md5sum = "dd7e7d66aa61f766087ccedcc5b96655"
  _type = "vehicle_msgs/vehicle_upload"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 Vehicle_speed
float32 Vehicle_speedQuality
float32 EPS_SteerAng
float32 EPS_SteerAngQuality
float32 BMS_BattSOC
float32 BMS_BattSOCQuality
uint8 Tar_gearFeed
uint8 Tar_gearFeedQuality
uint8 Drive_Mode
"""
  __slots__ = ['Vehicle_speed','Vehicle_speedQuality','EPS_SteerAng','EPS_SteerAngQuality','BMS_BattSOC','BMS_BattSOCQuality','Tar_gearFeed','Tar_gearFeedQuality','Drive_Mode']
  _slot_types = ['float32','float32','float32','float32','float32','float32','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Vehicle_speed,Vehicle_speedQuality,EPS_SteerAng,EPS_SteerAngQuality,BMS_BattSOC,BMS_BattSOCQuality,Tar_gearFeed,Tar_gearFeedQuality,Drive_Mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(vehicle_upload, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Vehicle_speed is None:
        self.Vehicle_speed = 0.
      if self.Vehicle_speedQuality is None:
        self.Vehicle_speedQuality = 0.
      if self.EPS_SteerAng is None:
        self.EPS_SteerAng = 0.
      if self.EPS_SteerAngQuality is None:
        self.EPS_SteerAngQuality = 0.
      if self.BMS_BattSOC is None:
        self.BMS_BattSOC = 0.
      if self.BMS_BattSOCQuality is None:
        self.BMS_BattSOCQuality = 0.
      if self.Tar_gearFeed is None:
        self.Tar_gearFeed = 0
      if self.Tar_gearFeedQuality is None:
        self.Tar_gearFeedQuality = 0
      if self.Drive_Mode is None:
        self.Drive_Mode = 0
    else:
      self.Vehicle_speed = 0.
      self.Vehicle_speedQuality = 0.
      self.EPS_SteerAng = 0.
      self.EPS_SteerAngQuality = 0.
      self.BMS_BattSOC = 0.
      self.BMS_BattSOCQuality = 0.
      self.Tar_gearFeed = 0
      self.Tar_gearFeedQuality = 0
      self.Drive_Mode = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6f3B().pack(_x.Vehicle_speed, _x.Vehicle_speedQuality, _x.EPS_SteerAng, _x.EPS_SteerAngQuality, _x.BMS_BattSOC, _x.BMS_BattSOCQuality, _x.Tar_gearFeed, _x.Tar_gearFeedQuality, _x.Drive_Mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.Vehicle_speed, _x.Vehicle_speedQuality, _x.EPS_SteerAng, _x.EPS_SteerAngQuality, _x.BMS_BattSOC, _x.BMS_BattSOCQuality, _x.Tar_gearFeed, _x.Tar_gearFeedQuality, _x.Drive_Mode,) = _get_struct_6f3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6f3B().pack(_x.Vehicle_speed, _x.Vehicle_speedQuality, _x.EPS_SteerAng, _x.EPS_SteerAngQuality, _x.BMS_BattSOC, _x.BMS_BattSOCQuality, _x.Tar_gearFeed, _x.Tar_gearFeedQuality, _x.Drive_Mode))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 27
      (_x.Vehicle_speed, _x.Vehicle_speedQuality, _x.EPS_SteerAng, _x.EPS_SteerAngQuality, _x.BMS_BattSOC, _x.BMS_BattSOCQuality, _x.Tar_gearFeed, _x.Tar_gearFeedQuality, _x.Drive_Mode,) = _get_struct_6f3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6f3B = None
def _get_struct_6f3B():
    global _struct_6f3B
    if _struct_6f3B is None:
        _struct_6f3B = struct.Struct("<6f3B")
    return _struct_6f3B
