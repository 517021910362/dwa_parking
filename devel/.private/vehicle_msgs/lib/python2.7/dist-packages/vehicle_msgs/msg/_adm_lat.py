# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/adm_lat.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class adm_lat(genpy.Message):
  _md5sum = "093d38f791b755925ba9f28e5792bd0c"
  _type = "vehicle_msgs/adm_lat"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 Enable_lat
float32 GPS1_Curvature_cmd
float32 V_des
int8 Gear_des
uint8 End
uint8 Objectfalse
float32 obs_dis
float32 steering_wheel_angle
float32 lateral_offset
int16 current_ind"""
  __slots__ = ['Enable_lat','GPS1_Curvature_cmd','V_des','Gear_des','End','Objectfalse','obs_dis','steering_wheel_angle','lateral_offset','current_ind']
  _slot_types = ['uint8','float32','float32','int8','uint8','uint8','float32','float32','float32','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Enable_lat,GPS1_Curvature_cmd,V_des,Gear_des,End,Objectfalse,obs_dis,steering_wheel_angle,lateral_offset,current_ind

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(adm_lat, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Enable_lat is None:
        self.Enable_lat = 0
      if self.GPS1_Curvature_cmd is None:
        self.GPS1_Curvature_cmd = 0.
      if self.V_des is None:
        self.V_des = 0.
      if self.Gear_des is None:
        self.Gear_des = 0
      if self.End is None:
        self.End = 0
      if self.Objectfalse is None:
        self.Objectfalse = 0
      if self.obs_dis is None:
        self.obs_dis = 0.
      if self.steering_wheel_angle is None:
        self.steering_wheel_angle = 0.
      if self.lateral_offset is None:
        self.lateral_offset = 0.
      if self.current_ind is None:
        self.current_ind = 0
    else:
      self.Enable_lat = 0
      self.GPS1_Curvature_cmd = 0.
      self.V_des = 0.
      self.Gear_des = 0
      self.End = 0
      self.Objectfalse = 0
      self.obs_dis = 0.
      self.steering_wheel_angle = 0.
      self.lateral_offset = 0.
      self.current_ind = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2fb2B3fh().pack(_x.Enable_lat, _x.GPS1_Curvature_cmd, _x.V_des, _x.Gear_des, _x.End, _x.Objectfalse, _x.obs_dis, _x.steering_wheel_angle, _x.lateral_offset, _x.current_ind))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.Enable_lat, _x.GPS1_Curvature_cmd, _x.V_des, _x.Gear_des, _x.End, _x.Objectfalse, _x.obs_dis, _x.steering_wheel_angle, _x.lateral_offset, _x.current_ind,) = _get_struct_B2fb2B3fh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2fb2B3fh().pack(_x.Enable_lat, _x.GPS1_Curvature_cmd, _x.V_des, _x.Gear_des, _x.End, _x.Objectfalse, _x.obs_dis, _x.steering_wheel_angle, _x.lateral_offset, _x.current_ind))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.Enable_lat, _x.GPS1_Curvature_cmd, _x.V_des, _x.Gear_des, _x.End, _x.Objectfalse, _x.obs_dis, _x.steering_wheel_angle, _x.lateral_offset, _x.current_ind,) = _get_struct_B2fb2B3fh().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2fb2B3fh = None
def _get_struct_B2fb2B3fh():
    global _struct_B2fb2B3fh
    if _struct_B2fb2B3fh is None:
        _struct_B2fb2B3fh = struct.Struct("<B2fb2B3fh")
    return _struct_B2fb2B3fh
