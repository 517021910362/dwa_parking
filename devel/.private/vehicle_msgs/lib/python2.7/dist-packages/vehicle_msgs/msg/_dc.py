# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/dc.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class dc(genpy.Message):
  _md5sum = "ea6e5c96799e7b32503d5842a24d9a14"
  _type = "vehicle_msgs/dc"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 DC_command
uint8 DC_entranceRequest
uint8 DC_parkingRequest
float32 Excavator_AngleRoll
float32 Excavator_Anglepitch
float32 Excavator_AngleHeading
float32 Excavator_PosLon
float32 Excavator_PosLat
uint8 DC_truckFinish
uint8 MQTT_GateStatus
uint8 Excavator_ImuStatus
uint8 DC_VehControlReq
uint8 DC_DispatchReq
string road_List
"""
  __slots__ = ['DC_command','DC_entranceRequest','DC_parkingRequest','Excavator_AngleRoll','Excavator_Anglepitch','Excavator_AngleHeading','Excavator_PosLon','Excavator_PosLat','DC_truckFinish','MQTT_GateStatus','Excavator_ImuStatus','DC_VehControlReq','DC_DispatchReq','road_List']
  _slot_types = ['uint8','uint8','uint8','float32','float32','float32','float32','float32','uint8','uint8','uint8','uint8','uint8','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       DC_command,DC_entranceRequest,DC_parkingRequest,Excavator_AngleRoll,Excavator_Anglepitch,Excavator_AngleHeading,Excavator_PosLon,Excavator_PosLat,DC_truckFinish,MQTT_GateStatus,Excavator_ImuStatus,DC_VehControlReq,DC_DispatchReq,road_List

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(dc, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.DC_command is None:
        self.DC_command = 0
      if self.DC_entranceRequest is None:
        self.DC_entranceRequest = 0
      if self.DC_parkingRequest is None:
        self.DC_parkingRequest = 0
      if self.Excavator_AngleRoll is None:
        self.Excavator_AngleRoll = 0.
      if self.Excavator_Anglepitch is None:
        self.Excavator_Anglepitch = 0.
      if self.Excavator_AngleHeading is None:
        self.Excavator_AngleHeading = 0.
      if self.Excavator_PosLon is None:
        self.Excavator_PosLon = 0.
      if self.Excavator_PosLat is None:
        self.Excavator_PosLat = 0.
      if self.DC_truckFinish is None:
        self.DC_truckFinish = 0
      if self.MQTT_GateStatus is None:
        self.MQTT_GateStatus = 0
      if self.Excavator_ImuStatus is None:
        self.Excavator_ImuStatus = 0
      if self.DC_VehControlReq is None:
        self.DC_VehControlReq = 0
      if self.DC_DispatchReq is None:
        self.DC_DispatchReq = 0
      if self.road_List is None:
        self.road_List = ''
    else:
      self.DC_command = 0
      self.DC_entranceRequest = 0
      self.DC_parkingRequest = 0
      self.Excavator_AngleRoll = 0.
      self.Excavator_Anglepitch = 0.
      self.Excavator_AngleHeading = 0.
      self.Excavator_PosLon = 0.
      self.Excavator_PosLat = 0.
      self.DC_truckFinish = 0
      self.MQTT_GateStatus = 0
      self.Excavator_ImuStatus = 0
      self.DC_VehControlReq = 0
      self.DC_DispatchReq = 0
      self.road_List = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B5f5B().pack(_x.DC_command, _x.DC_entranceRequest, _x.DC_parkingRequest, _x.Excavator_AngleRoll, _x.Excavator_Anglepitch, _x.Excavator_AngleHeading, _x.Excavator_PosLon, _x.Excavator_PosLat, _x.DC_truckFinish, _x.MQTT_GateStatus, _x.Excavator_ImuStatus, _x.DC_VehControlReq, _x.DC_DispatchReq))
      _x = self.road_List
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.DC_command, _x.DC_entranceRequest, _x.DC_parkingRequest, _x.Excavator_AngleRoll, _x.Excavator_Anglepitch, _x.Excavator_AngleHeading, _x.Excavator_PosLon, _x.Excavator_PosLat, _x.DC_truckFinish, _x.MQTT_GateStatus, _x.Excavator_ImuStatus, _x.DC_VehControlReq, _x.DC_DispatchReq,) = _get_struct_3B5f5B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.road_List = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.road_List = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B5f5B().pack(_x.DC_command, _x.DC_entranceRequest, _x.DC_parkingRequest, _x.Excavator_AngleRoll, _x.Excavator_Anglepitch, _x.Excavator_AngleHeading, _x.Excavator_PosLon, _x.Excavator_PosLat, _x.DC_truckFinish, _x.MQTT_GateStatus, _x.Excavator_ImuStatus, _x.DC_VehControlReq, _x.DC_DispatchReq))
      _x = self.road_List
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.DC_command, _x.DC_entranceRequest, _x.DC_parkingRequest, _x.Excavator_AngleRoll, _x.Excavator_Anglepitch, _x.Excavator_AngleHeading, _x.Excavator_PosLon, _x.Excavator_PosLat, _x.DC_truckFinish, _x.MQTT_GateStatus, _x.Excavator_ImuStatus, _x.DC_VehControlReq, _x.DC_DispatchReq,) = _get_struct_3B5f5B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.road_List = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.road_List = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B5f5B = None
def _get_struct_3B5f5B():
    global _struct_3B5f5B
    if _struct_3B5f5B is None:
        _struct_3B5f5B = struct.Struct("<3B5f5B")
    return _struct_3B5f5B
