# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from vehicle_msgs/vehicle_download.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class vehicle_download(genpy.Message):
  _md5sum = "b1c7accc64c1d758d5af51e3905238ba"
  _type = "vehicle_msgs/vehicle_download"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 TarAccler
float32 Tar_steerangle
uint8 Tar_gear
uint8 DiveoffReq
uint8 ADS_mode
uint8 Stoprequest
uint8 EndOfTravel
uint8 Station_In_Out
uint8 TurnSignal
uint8 DoubleLight
uint8 HummerSts
float32 latAcceleration
float32 longAcceleration
float32 Acceleration
float32 Yaw_rate
float32 Slope"""
  __slots__ = ['TarAccler','Tar_steerangle','Tar_gear','DiveoffReq','ADS_mode','Stoprequest','EndOfTravel','Station_In_Out','TurnSignal','DoubleLight','HummerSts','latAcceleration','longAcceleration','Acceleration','Yaw_rate','Slope']
  _slot_types = ['float32','float32','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       TarAccler,Tar_steerangle,Tar_gear,DiveoffReq,ADS_mode,Stoprequest,EndOfTravel,Station_In_Out,TurnSignal,DoubleLight,HummerSts,latAcceleration,longAcceleration,Acceleration,Yaw_rate,Slope

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(vehicle_download, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.TarAccler is None:
        self.TarAccler = 0.
      if self.Tar_steerangle is None:
        self.Tar_steerangle = 0.
      if self.Tar_gear is None:
        self.Tar_gear = 0
      if self.DiveoffReq is None:
        self.DiveoffReq = 0
      if self.ADS_mode is None:
        self.ADS_mode = 0
      if self.Stoprequest is None:
        self.Stoprequest = 0
      if self.EndOfTravel is None:
        self.EndOfTravel = 0
      if self.Station_In_Out is None:
        self.Station_In_Out = 0
      if self.TurnSignal is None:
        self.TurnSignal = 0
      if self.DoubleLight is None:
        self.DoubleLight = 0
      if self.HummerSts is None:
        self.HummerSts = 0
      if self.latAcceleration is None:
        self.latAcceleration = 0.
      if self.longAcceleration is None:
        self.longAcceleration = 0.
      if self.Acceleration is None:
        self.Acceleration = 0.
      if self.Yaw_rate is None:
        self.Yaw_rate = 0.
      if self.Slope is None:
        self.Slope = 0.
    else:
      self.TarAccler = 0.
      self.Tar_steerangle = 0.
      self.Tar_gear = 0
      self.DiveoffReq = 0
      self.ADS_mode = 0
      self.Stoprequest = 0
      self.EndOfTravel = 0
      self.Station_In_Out = 0
      self.TurnSignal = 0
      self.DoubleLight = 0
      self.HummerSts = 0
      self.latAcceleration = 0.
      self.longAcceleration = 0.
      self.Acceleration = 0.
      self.Yaw_rate = 0.
      self.Slope = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2f9B5f().pack(_x.TarAccler, _x.Tar_steerangle, _x.Tar_gear, _x.DiveoffReq, _x.ADS_mode, _x.Stoprequest, _x.EndOfTravel, _x.Station_In_Out, _x.TurnSignal, _x.DoubleLight, _x.HummerSts, _x.latAcceleration, _x.longAcceleration, _x.Acceleration, _x.Yaw_rate, _x.Slope))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.TarAccler, _x.Tar_steerangle, _x.Tar_gear, _x.DiveoffReq, _x.ADS_mode, _x.Stoprequest, _x.EndOfTravel, _x.Station_In_Out, _x.TurnSignal, _x.DoubleLight, _x.HummerSts, _x.latAcceleration, _x.longAcceleration, _x.Acceleration, _x.Yaw_rate, _x.Slope,) = _get_struct_2f9B5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2f9B5f().pack(_x.TarAccler, _x.Tar_steerangle, _x.Tar_gear, _x.DiveoffReq, _x.ADS_mode, _x.Stoprequest, _x.EndOfTravel, _x.Station_In_Out, _x.TurnSignal, _x.DoubleLight, _x.HummerSts, _x.latAcceleration, _x.longAcceleration, _x.Acceleration, _x.Yaw_rate, _x.Slope))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 37
      (_x.TarAccler, _x.Tar_steerangle, _x.Tar_gear, _x.DiveoffReq, _x.ADS_mode, _x.Stoprequest, _x.EndOfTravel, _x.Station_In_Out, _x.TurnSignal, _x.DoubleLight, _x.HummerSts, _x.latAcceleration, _x.longAcceleration, _x.Acceleration, _x.Yaw_rate, _x.Slope,) = _get_struct_2f9B5f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f9B5f = None
def _get_struct_2f9B5f():
    global _struct_2f9B5f
    if _struct_2f9B5f is None:
        _struct_2f9B5f = struct.Struct("<2f9B5f")
    return _struct_2f9B5f
