// Generated by gencpp from file vehicle_msgs/adm_lat.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_ADM_LAT_H
#define VEHICLE_MSGS_MESSAGE_ADM_LAT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct adm_lat_
{
  typedef adm_lat_<ContainerAllocator> Type;

  adm_lat_()
    : Enable_lat(0)
    , GPS1_Curvature_cmd(0.0)
    , V_des(0.0)
    , Gear_des(0)
    , End(0)
    , Objectfalse(0)
    , obs_dis(0.0)
    , steering_wheel_angle(0.0)
    , lateral_offset(0.0)
    , current_ind(0)  {
    }
  adm_lat_(const ContainerAllocator& _alloc)
    : Enable_lat(0)
    , GPS1_Curvature_cmd(0.0)
    , V_des(0.0)
    , Gear_des(0)
    , End(0)
    , Objectfalse(0)
    , obs_dis(0.0)
    , steering_wheel_angle(0.0)
    , lateral_offset(0.0)
    , current_ind(0)  {
  (void)_alloc;
    }



   typedef uint8_t _Enable_lat_type;
  _Enable_lat_type Enable_lat;

   typedef float _GPS1_Curvature_cmd_type;
  _GPS1_Curvature_cmd_type GPS1_Curvature_cmd;

   typedef float _V_des_type;
  _V_des_type V_des;

   typedef int8_t _Gear_des_type;
  _Gear_des_type Gear_des;

   typedef uint8_t _End_type;
  _End_type End;

   typedef uint8_t _Objectfalse_type;
  _Objectfalse_type Objectfalse;

   typedef float _obs_dis_type;
  _obs_dis_type obs_dis;

   typedef float _steering_wheel_angle_type;
  _steering_wheel_angle_type steering_wheel_angle;

   typedef float _lateral_offset_type;
  _lateral_offset_type lateral_offset;

   typedef int16_t _current_ind_type;
  _current_ind_type current_ind;





  typedef boost::shared_ptr< ::vehicle_msgs::adm_lat_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::adm_lat_<ContainerAllocator> const> ConstPtr;

}; // struct adm_lat_

typedef ::vehicle_msgs::adm_lat_<std::allocator<void> > adm_lat;

typedef boost::shared_ptr< ::vehicle_msgs::adm_lat > adm_latPtr;
typedef boost::shared_ptr< ::vehicle_msgs::adm_lat const> adm_latConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::adm_lat_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::adm_lat_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_msgs::adm_lat_<ContainerAllocator1> & lhs, const ::vehicle_msgs::adm_lat_<ContainerAllocator2> & rhs)
{
  return lhs.Enable_lat == rhs.Enable_lat &&
    lhs.GPS1_Curvature_cmd == rhs.GPS1_Curvature_cmd &&
    lhs.V_des == rhs.V_des &&
    lhs.Gear_des == rhs.Gear_des &&
    lhs.End == rhs.End &&
    lhs.Objectfalse == rhs.Objectfalse &&
    lhs.obs_dis == rhs.obs_dis &&
    lhs.steering_wheel_angle == rhs.steering_wheel_angle &&
    lhs.lateral_offset == rhs.lateral_offset &&
    lhs.current_ind == rhs.current_ind;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_msgs::adm_lat_<ContainerAllocator1> & lhs, const ::vehicle_msgs::adm_lat_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::adm_lat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::adm_lat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::adm_lat_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::adm_lat_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::adm_lat_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::adm_lat_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::adm_lat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "093d38f791b755925ba9f28e5792bd0c";
  }

  static const char* value(const ::vehicle_msgs::adm_lat_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x093d38f791b75592ULL;
  static const uint64_t static_value2 = 0x5ba9f28e5792bd0cULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::adm_lat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/adm_lat";
  }

  static const char* value(const ::vehicle_msgs::adm_lat_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::adm_lat_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 Enable_lat\n"
"float32 GPS1_Curvature_cmd\n"
"float32 V_des\n"
"int8 Gear_des\n"
"uint8 End\n"
"uint8 Objectfalse\n"
"float32 obs_dis\n"
"float32 steering_wheel_angle\n"
"float32 lateral_offset\n"
"int16 current_ind\n"
;
  }

  static const char* value(const ::vehicle_msgs::adm_lat_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::adm_lat_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Enable_lat);
      stream.next(m.GPS1_Curvature_cmd);
      stream.next(m.V_des);
      stream.next(m.Gear_des);
      stream.next(m.End);
      stream.next(m.Objectfalse);
      stream.next(m.obs_dis);
      stream.next(m.steering_wheel_angle);
      stream.next(m.lateral_offset);
      stream.next(m.current_ind);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct adm_lat_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::adm_lat_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::adm_lat_<ContainerAllocator>& v)
  {
    s << indent << "Enable_lat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Enable_lat);
    s << indent << "GPS1_Curvature_cmd: ";
    Printer<float>::stream(s, indent + "  ", v.GPS1_Curvature_cmd);
    s << indent << "V_des: ";
    Printer<float>::stream(s, indent + "  ", v.V_des);
    s << indent << "Gear_des: ";
    Printer<int8_t>::stream(s, indent + "  ", v.Gear_des);
    s << indent << "End: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.End);
    s << indent << "Objectfalse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Objectfalse);
    s << indent << "obs_dis: ";
    Printer<float>::stream(s, indent + "  ", v.obs_dis);
    s << indent << "steering_wheel_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steering_wheel_angle);
    s << indent << "lateral_offset: ";
    Printer<float>::stream(s, indent + "  ", v.lateral_offset);
    s << indent << "current_ind: ";
    Printer<int16_t>::stream(s, indent + "  ", v.current_ind);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_ADM_LAT_H
