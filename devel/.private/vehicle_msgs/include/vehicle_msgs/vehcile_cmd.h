// Generated by gencpp from file vehicle_msgs/vehcile_cmd.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_VEHCILE_CMD_H
#define VEHICLE_MSGS_MESSAGE_VEHCILE_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct vehcile_cmd_
{
  typedef vehcile_cmd_<ContainerAllocator> Type;

  vehcile_cmd_()
    : head1(0)
    , head2(0)
    , length(0)
    , steering(0)
    , brake_force(0)
    , pedal_ratio(0)
    , gear_position(0)
    , working_mode(0)
    , racing_num(0)
    , racing_status(0)
    , checksum(0)  {
    }
  vehcile_cmd_(const ContainerAllocator& _alloc)
    : head1(0)
    , head2(0)
    , length(0)
    , steering(0)
    , brake_force(0)
    , pedal_ratio(0)
    , gear_position(0)
    , working_mode(0)
    , racing_num(0)
    , racing_status(0)
    , checksum(0)  {
  (void)_alloc;
    }



   typedef uint8_t _head1_type;
  _head1_type head1;

   typedef uint8_t _head2_type;
  _head2_type head2;

   typedef uint8_t _length_type;
  _length_type length;

   typedef uint8_t _steering_type;
  _steering_type steering;

   typedef uint8_t _brake_force_type;
  _brake_force_type brake_force;

   typedef uint8_t _pedal_ratio_type;
  _pedal_ratio_type pedal_ratio;

   typedef uint8_t _gear_position_type;
  _gear_position_type gear_position;

   typedef uint8_t _working_mode_type;
  _working_mode_type working_mode;

   typedef uint8_t _racing_num_type;
  _racing_num_type racing_num;

   typedef uint8_t _racing_status_type;
  _racing_status_type racing_status;

   typedef uint16_t _checksum_type;
  _checksum_type checksum;





  typedef boost::shared_ptr< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct vehcile_cmd_

typedef ::vehicle_msgs::vehcile_cmd_<std::allocator<void> > vehcile_cmd;

typedef boost::shared_ptr< ::vehicle_msgs::vehcile_cmd > vehcile_cmdPtr;
typedef boost::shared_ptr< ::vehicle_msgs::vehcile_cmd const> vehcile_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_msgs::vehcile_cmd_<ContainerAllocator1> & lhs, const ::vehicle_msgs::vehcile_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.head1 == rhs.head1 &&
    lhs.head2 == rhs.head2 &&
    lhs.length == rhs.length &&
    lhs.steering == rhs.steering &&
    lhs.brake_force == rhs.brake_force &&
    lhs.pedal_ratio == rhs.pedal_ratio &&
    lhs.gear_position == rhs.gear_position &&
    lhs.working_mode == rhs.working_mode &&
    lhs.racing_num == rhs.racing_num &&
    lhs.racing_status == rhs.racing_status &&
    lhs.checksum == rhs.checksum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_msgs::vehcile_cmd_<ContainerAllocator1> & lhs, const ::vehicle_msgs::vehcile_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f174333528b91e4bd29b231b98ffd01e";
  }

  static const char* value(const ::vehicle_msgs::vehcile_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf174333528b91e4bULL;
  static const uint64_t static_value2 = 0xd29b231b98ffd01eULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/vehcile_cmd";
  }

  static const char* value(const ::vehicle_msgs::vehcile_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 head1\n"
"uint8 head2\n"
"uint8 length\n"
"uint8 steering\n"
"uint8 brake_force\n"
"uint8 pedal_ratio\n"
"uint8 gear_position\n"
"uint8 working_mode\n"
"uint8 racing_num\n"
"uint8 racing_status\n"
"uint16 checksum\n"
"\n"
;
  }

  static const char* value(const ::vehicle_msgs::vehcile_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.head1);
      stream.next(m.head2);
      stream.next(m.length);
      stream.next(m.steering);
      stream.next(m.brake_force);
      stream.next(m.pedal_ratio);
      stream.next(m.gear_position);
      stream.next(m.working_mode);
      stream.next(m.racing_num);
      stream.next(m.racing_status);
      stream.next(m.checksum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct vehcile_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::vehcile_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::vehcile_cmd_<ContainerAllocator>& v)
  {
    s << indent << "head1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.head1);
    s << indent << "head2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.head2);
    s << indent << "length: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.length);
    s << indent << "steering: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.steering);
    s << indent << "brake_force: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.brake_force);
    s << indent << "pedal_ratio: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pedal_ratio);
    s << indent << "gear_position: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear_position);
    s << indent << "working_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.working_mode);
    s << indent << "racing_num: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.racing_num);
    s << indent << "racing_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.racing_status);
    s << indent << "checksum: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.checksum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_VEHCILE_CMD_H
