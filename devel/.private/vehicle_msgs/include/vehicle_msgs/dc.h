// Generated by gencpp from file vehicle_msgs/dc.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_DC_H
#define VEHICLE_MSGS_MESSAGE_DC_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct dc_
{
  typedef dc_<ContainerAllocator> Type;

  dc_()
    : DC_command(0)
    , DC_entranceRequest(0)
    , DC_parkingRequest(0)
    , Excavator_AngleRoll(0.0)
    , Excavator_Anglepitch(0.0)
    , Excavator_AngleHeading(0.0)
    , Excavator_PosLon(0.0)
    , Excavator_PosLat(0.0)
    , DC_truckFinish(0)
    , MQTT_GateStatus(0)
    , Excavator_ImuStatus(0)
    , DC_VehControlReq(0)
    , DC_DispatchReq(0)
    , road_List()  {
    }
  dc_(const ContainerAllocator& _alloc)
    : DC_command(0)
    , DC_entranceRequest(0)
    , DC_parkingRequest(0)
    , Excavator_AngleRoll(0.0)
    , Excavator_Anglepitch(0.0)
    , Excavator_AngleHeading(0.0)
    , Excavator_PosLon(0.0)
    , Excavator_PosLat(0.0)
    , DC_truckFinish(0)
    , MQTT_GateStatus(0)
    , Excavator_ImuStatus(0)
    , DC_VehControlReq(0)
    , DC_DispatchReq(0)
    , road_List(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _DC_command_type;
  _DC_command_type DC_command;

   typedef uint8_t _DC_entranceRequest_type;
  _DC_entranceRequest_type DC_entranceRequest;

   typedef uint8_t _DC_parkingRequest_type;
  _DC_parkingRequest_type DC_parkingRequest;

   typedef float _Excavator_AngleRoll_type;
  _Excavator_AngleRoll_type Excavator_AngleRoll;

   typedef float _Excavator_Anglepitch_type;
  _Excavator_Anglepitch_type Excavator_Anglepitch;

   typedef float _Excavator_AngleHeading_type;
  _Excavator_AngleHeading_type Excavator_AngleHeading;

   typedef float _Excavator_PosLon_type;
  _Excavator_PosLon_type Excavator_PosLon;

   typedef float _Excavator_PosLat_type;
  _Excavator_PosLat_type Excavator_PosLat;

   typedef uint8_t _DC_truckFinish_type;
  _DC_truckFinish_type DC_truckFinish;

   typedef uint8_t _MQTT_GateStatus_type;
  _MQTT_GateStatus_type MQTT_GateStatus;

   typedef uint8_t _Excavator_ImuStatus_type;
  _Excavator_ImuStatus_type Excavator_ImuStatus;

   typedef uint8_t _DC_VehControlReq_type;
  _DC_VehControlReq_type DC_VehControlReq;

   typedef uint8_t _DC_DispatchReq_type;
  _DC_DispatchReq_type DC_DispatchReq;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _road_List_type;
  _road_List_type road_List;





  typedef boost::shared_ptr< ::vehicle_msgs::dc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::dc_<ContainerAllocator> const> ConstPtr;

}; // struct dc_

typedef ::vehicle_msgs::dc_<std::allocator<void> > dc;

typedef boost::shared_ptr< ::vehicle_msgs::dc > dcPtr;
typedef boost::shared_ptr< ::vehicle_msgs::dc const> dcConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::dc_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::dc_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_msgs::dc_<ContainerAllocator1> & lhs, const ::vehicle_msgs::dc_<ContainerAllocator2> & rhs)
{
  return lhs.DC_command == rhs.DC_command &&
    lhs.DC_entranceRequest == rhs.DC_entranceRequest &&
    lhs.DC_parkingRequest == rhs.DC_parkingRequest &&
    lhs.Excavator_AngleRoll == rhs.Excavator_AngleRoll &&
    lhs.Excavator_Anglepitch == rhs.Excavator_Anglepitch &&
    lhs.Excavator_AngleHeading == rhs.Excavator_AngleHeading &&
    lhs.Excavator_PosLon == rhs.Excavator_PosLon &&
    lhs.Excavator_PosLat == rhs.Excavator_PosLat &&
    lhs.DC_truckFinish == rhs.DC_truckFinish &&
    lhs.MQTT_GateStatus == rhs.MQTT_GateStatus &&
    lhs.Excavator_ImuStatus == rhs.Excavator_ImuStatus &&
    lhs.DC_VehControlReq == rhs.DC_VehControlReq &&
    lhs.DC_DispatchReq == rhs.DC_DispatchReq &&
    lhs.road_List == rhs.road_List;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_msgs::dc_<ContainerAllocator1> & lhs, const ::vehicle_msgs::dc_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::dc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::dc_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::dc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::dc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::dc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::dc_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::dc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ea6e5c96799e7b32503d5842a24d9a14";
  }

  static const char* value(const ::vehicle_msgs::dc_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xea6e5c96799e7b32ULL;
  static const uint64_t static_value2 = 0x503d5842a24d9a14ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::dc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/dc";
  }

  static const char* value(const ::vehicle_msgs::dc_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::dc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 DC_command\n"
"uint8 DC_entranceRequest\n"
"uint8 DC_parkingRequest\n"
"float32 Excavator_AngleRoll\n"
"float32 Excavator_Anglepitch\n"
"float32 Excavator_AngleHeading\n"
"float32 Excavator_PosLon\n"
"float32 Excavator_PosLat\n"
"uint8 DC_truckFinish\n"
"uint8 MQTT_GateStatus\n"
"uint8 Excavator_ImuStatus\n"
"uint8 DC_VehControlReq\n"
"uint8 DC_DispatchReq\n"
"string road_List\n"
;
  }

  static const char* value(const ::vehicle_msgs::dc_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::dc_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.DC_command);
      stream.next(m.DC_entranceRequest);
      stream.next(m.DC_parkingRequest);
      stream.next(m.Excavator_AngleRoll);
      stream.next(m.Excavator_Anglepitch);
      stream.next(m.Excavator_AngleHeading);
      stream.next(m.Excavator_PosLon);
      stream.next(m.Excavator_PosLat);
      stream.next(m.DC_truckFinish);
      stream.next(m.MQTT_GateStatus);
      stream.next(m.Excavator_ImuStatus);
      stream.next(m.DC_VehControlReq);
      stream.next(m.DC_DispatchReq);
      stream.next(m.road_List);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dc_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::dc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::dc_<ContainerAllocator>& v)
  {
    s << indent << "DC_command: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DC_command);
    s << indent << "DC_entranceRequest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DC_entranceRequest);
    s << indent << "DC_parkingRequest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DC_parkingRequest);
    s << indent << "Excavator_AngleRoll: ";
    Printer<float>::stream(s, indent + "  ", v.Excavator_AngleRoll);
    s << indent << "Excavator_Anglepitch: ";
    Printer<float>::stream(s, indent + "  ", v.Excavator_Anglepitch);
    s << indent << "Excavator_AngleHeading: ";
    Printer<float>::stream(s, indent + "  ", v.Excavator_AngleHeading);
    s << indent << "Excavator_PosLon: ";
    Printer<float>::stream(s, indent + "  ", v.Excavator_PosLon);
    s << indent << "Excavator_PosLat: ";
    Printer<float>::stream(s, indent + "  ", v.Excavator_PosLat);
    s << indent << "DC_truckFinish: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DC_truckFinish);
    s << indent << "MQTT_GateStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.MQTT_GateStatus);
    s << indent << "Excavator_ImuStatus: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Excavator_ImuStatus);
    s << indent << "DC_VehControlReq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DC_VehControlReq);
    s << indent << "DC_DispatchReq: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DC_DispatchReq);
    s << indent << "road_List: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.road_List);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_DC_H
