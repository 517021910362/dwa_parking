// Generated by gencpp from file vehicle_msgs/cdm_cmd.msg
// DO NOT EDIT!


#ifndef VEHICLE_MSGS_MESSAGE_CDM_CMD_H
#define VEHICLE_MSGS_MESSAGE_CDM_CMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vehicle_msgs
{
template <class ContainerAllocator>
struct cdm_cmd_
{
  typedef cdm_cmd_<ContainerAllocator> Type;

  cdm_cmd_()
    : Veh_Mass(0)
    , Front_Hydraulic_BrakeFd(0)
    , Rear_Hydraulic_BrakeFd(0)
    , DriveModeFd(0)
    , Load_BrakeFd(0)
    , Compartment_Fd(0)
    , Vehicle_FaultLevel(0)
    , Veh_Spd(0.0)
    , Fuel_Signal(0)
    , Engine_Speed(0)
    , TCM_GearFd(0)
    , Steer_fd(0)
    , Lat_State(0)  {
    }
  cdm_cmd_(const ContainerAllocator& _alloc)
    : Veh_Mass(0)
    , Front_Hydraulic_BrakeFd(0)
    , Rear_Hydraulic_BrakeFd(0)
    , DriveModeFd(0)
    , Load_BrakeFd(0)
    , Compartment_Fd(0)
    , Vehicle_FaultLevel(0)
    , Veh_Spd(0.0)
    , Fuel_Signal(0)
    , Engine_Speed(0)
    , TCM_GearFd(0)
    , Steer_fd(0)
    , Lat_State(0)  {
  (void)_alloc;
    }



   typedef uint8_t _Veh_Mass_type;
  _Veh_Mass_type Veh_Mass;

   typedef uint8_t _Front_Hydraulic_BrakeFd_type;
  _Front_Hydraulic_BrakeFd_type Front_Hydraulic_BrakeFd;

   typedef uint8_t _Rear_Hydraulic_BrakeFd_type;
  _Rear_Hydraulic_BrakeFd_type Rear_Hydraulic_BrakeFd;

   typedef uint8_t _DriveModeFd_type;
  _DriveModeFd_type DriveModeFd;

   typedef uint8_t _Load_BrakeFd_type;
  _Load_BrakeFd_type Load_BrakeFd;

   typedef uint8_t _Compartment_Fd_type;
  _Compartment_Fd_type Compartment_Fd;

   typedef uint8_t _Vehicle_FaultLevel_type;
  _Vehicle_FaultLevel_type Vehicle_FaultLevel;

   typedef float _Veh_Spd_type;
  _Veh_Spd_type Veh_Spd;

   typedef uint8_t _Fuel_Signal_type;
  _Fuel_Signal_type Fuel_Signal;

   typedef uint16_t _Engine_Speed_type;
  _Engine_Speed_type Engine_Speed;

   typedef int8_t _TCM_GearFd_type;
  _TCM_GearFd_type TCM_GearFd;

   typedef uint32_t _Steer_fd_type;
  _Steer_fd_type Steer_fd;

   typedef uint8_t _Lat_State_type;
  _Lat_State_type Lat_State;





  typedef boost::shared_ptr< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> const> ConstPtr;

}; // struct cdm_cmd_

typedef ::vehicle_msgs::cdm_cmd_<std::allocator<void> > cdm_cmd;

typedef boost::shared_ptr< ::vehicle_msgs::cdm_cmd > cdm_cmdPtr;
typedef boost::shared_ptr< ::vehicle_msgs::cdm_cmd const> cdm_cmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vehicle_msgs::cdm_cmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::vehicle_msgs::cdm_cmd_<ContainerAllocator1> & lhs, const ::vehicle_msgs::cdm_cmd_<ContainerAllocator2> & rhs)
{
  return lhs.Veh_Mass == rhs.Veh_Mass &&
    lhs.Front_Hydraulic_BrakeFd == rhs.Front_Hydraulic_BrakeFd &&
    lhs.Rear_Hydraulic_BrakeFd == rhs.Rear_Hydraulic_BrakeFd &&
    lhs.DriveModeFd == rhs.DriveModeFd &&
    lhs.Load_BrakeFd == rhs.Load_BrakeFd &&
    lhs.Compartment_Fd == rhs.Compartment_Fd &&
    lhs.Vehicle_FaultLevel == rhs.Vehicle_FaultLevel &&
    lhs.Veh_Spd == rhs.Veh_Spd &&
    lhs.Fuel_Signal == rhs.Fuel_Signal &&
    lhs.Engine_Speed == rhs.Engine_Speed &&
    lhs.TCM_GearFd == rhs.TCM_GearFd &&
    lhs.Steer_fd == rhs.Steer_fd &&
    lhs.Lat_State == rhs.Lat_State;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::vehicle_msgs::cdm_cmd_<ContainerAllocator1> & lhs, const ::vehicle_msgs::cdm_cmd_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace vehicle_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b69952894d338c32418394971da76f8";
  }

  static const char* value(const ::vehicle_msgs::cdm_cmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b69952894d338c3ULL;
  static const uint64_t static_value2 = 0x2418394971da76f8ULL;
};

template<class ContainerAllocator>
struct DataType< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vehicle_msgs/cdm_cmd";
  }

  static const char* value(const ::vehicle_msgs::cdm_cmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 Veh_Mass\n"
"uint8 Front_Hydraulic_BrakeFd\n"
"uint8 Rear_Hydraulic_BrakeFd\n"
"uint8 DriveModeFd\n"
"uint8 Load_BrakeFd\n"
"#uint8 Compartment_Up\n"
"#uint8 Compartment_Down\n"
"#uint8 Compartment_UpHighest\n"
"#uint8 Compartment_UpLowest\n"
"uint8 Compartment_Fd\n"
"uint8 Vehicle_FaultLevel\n"
"float32 Veh_Spd\n"
"uint8 Fuel_Signal\n"
"uint16 Engine_Speed\n"
"int8 TCM_GearFd\n"
"uint32 Steer_fd\n"
"uint8 Lat_State\n"
;
  }

  static const char* value(const ::vehicle_msgs::cdm_cmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Veh_Mass);
      stream.next(m.Front_Hydraulic_BrakeFd);
      stream.next(m.Rear_Hydraulic_BrakeFd);
      stream.next(m.DriveModeFd);
      stream.next(m.Load_BrakeFd);
      stream.next(m.Compartment_Fd);
      stream.next(m.Vehicle_FaultLevel);
      stream.next(m.Veh_Spd);
      stream.next(m.Fuel_Signal);
      stream.next(m.Engine_Speed);
      stream.next(m.TCM_GearFd);
      stream.next(m.Steer_fd);
      stream.next(m.Lat_State);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct cdm_cmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vehicle_msgs::cdm_cmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vehicle_msgs::cdm_cmd_<ContainerAllocator>& v)
  {
    s << indent << "Veh_Mass: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Veh_Mass);
    s << indent << "Front_Hydraulic_BrakeFd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Front_Hydraulic_BrakeFd);
    s << indent << "Rear_Hydraulic_BrakeFd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Rear_Hydraulic_BrakeFd);
    s << indent << "DriveModeFd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DriveModeFd);
    s << indent << "Load_BrakeFd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Load_BrakeFd);
    s << indent << "Compartment_Fd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Compartment_Fd);
    s << indent << "Vehicle_FaultLevel: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Vehicle_FaultLevel);
    s << indent << "Veh_Spd: ";
    Printer<float>::stream(s, indent + "  ", v.Veh_Spd);
    s << indent << "Fuel_Signal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Fuel_Signal);
    s << indent << "Engine_Speed: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Engine_Speed);
    s << indent << "TCM_GearFd: ";
    Printer<int8_t>::stream(s, indent + "  ", v.TCM_GearFd);
    s << indent << "Steer_fd: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.Steer_fd);
    s << indent << "Lat_State: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Lat_State);
  }
};

} // namespace message_operations
} // namespace ros

#endif // VEHICLE_MSGS_MESSAGE_CDM_CMD_H
