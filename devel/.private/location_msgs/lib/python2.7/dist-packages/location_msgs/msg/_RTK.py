# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from location_msgs/RTK.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class RTK(genpy.Message):
  _md5sum = "14854cd4132bb36ed5bbe6de9299da19"
  _type = "location_msgs/RTK"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 status
time stamp
float64 gpstime

float64 longitude
float64 latitude
float64 height

float64 heading
float64 pitch
float64 roll

float64 velocity

float64 AccelRawX
float64 AccelRawY
float64 AccelRawZ

float64 AngRateRawX
float64 AngRateRawY
float64 AngRateRawZ"""
  __slots__ = ['status','stamp','gpstime','longitude','latitude','height','heading','pitch','roll','velocity','AccelRawX','AccelRawY','AccelRawZ','AngRateRawX','AngRateRawY','AngRateRawZ']
  _slot_types = ['int32','time','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,stamp,gpstime,longitude,latitude,height,heading,pitch,roll,velocity,AccelRawX,AccelRawY,AccelRawZ,AngRateRawX,AngRateRawY,AngRateRawZ

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RTK, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.gpstime is None:
        self.gpstime = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.latitude is None:
        self.latitude = 0.
      if self.height is None:
        self.height = 0.
      if self.heading is None:
        self.heading = 0.
      if self.pitch is None:
        self.pitch = 0.
      if self.roll is None:
        self.roll = 0.
      if self.velocity is None:
        self.velocity = 0.
      if self.AccelRawX is None:
        self.AccelRawX = 0.
      if self.AccelRawY is None:
        self.AccelRawY = 0.
      if self.AccelRawZ is None:
        self.AccelRawZ = 0.
      if self.AngRateRawX is None:
        self.AngRateRawX = 0.
      if self.AngRateRawY is None:
        self.AngRateRawY = 0.
      if self.AngRateRawZ is None:
        self.AngRateRawZ = 0.
    else:
      self.status = 0
      self.stamp = genpy.Time()
      self.gpstime = 0.
      self.longitude = 0.
      self.latitude = 0.
      self.height = 0.
      self.heading = 0.
      self.pitch = 0.
      self.roll = 0.
      self.velocity = 0.
      self.AccelRawX = 0.
      self.AccelRawY = 0.
      self.AccelRawZ = 0.
      self.AngRateRawX = 0.
      self.AngRateRawY = 0.
      self.AngRateRawZ = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_i2I14d().pack(_x.status, _x.stamp.secs, _x.stamp.nsecs, _x.gpstime, _x.longitude, _x.latitude, _x.height, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.AccelRawX, _x.AccelRawY, _x.AccelRawZ, _x.AngRateRawX, _x.AngRateRawY, _x.AngRateRawZ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 124
      (_x.status, _x.stamp.secs, _x.stamp.nsecs, _x.gpstime, _x.longitude, _x.latitude, _x.height, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.AccelRawX, _x.AccelRawY, _x.AccelRawZ, _x.AngRateRawX, _x.AngRateRawY, _x.AngRateRawZ,) = _get_struct_i2I14d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_i2I14d().pack(_x.status, _x.stamp.secs, _x.stamp.nsecs, _x.gpstime, _x.longitude, _x.latitude, _x.height, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.AccelRawX, _x.AccelRawY, _x.AccelRawZ, _x.AngRateRawX, _x.AngRateRawY, _x.AngRateRawZ))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 124
      (_x.status, _x.stamp.secs, _x.stamp.nsecs, _x.gpstime, _x.longitude, _x.latitude, _x.height, _x.heading, _x.pitch, _x.roll, _x.velocity, _x.AccelRawX, _x.AccelRawY, _x.AccelRawZ, _x.AngRateRawX, _x.AngRateRawY, _x.AngRateRawZ,) = _get_struct_i2I14d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i2I14d = None
def _get_struct_i2I14d():
    global _struct_i2I14d
    if _struct_i2I14d is None:
        _struct_i2I14d = struct.Struct("<i2I14d")
    return _struct_i2I14d
