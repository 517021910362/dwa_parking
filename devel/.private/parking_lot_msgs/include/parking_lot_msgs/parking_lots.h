// Generated by gencpp from file parking_lot_msgs/parking_lots.msg
// DO NOT EDIT!


#ifndef PARKING_LOT_MSGS_MESSAGE_PARKING_LOTS_H
#define PARKING_LOT_MSGS_MESSAGE_PARKING_LOTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <parking_lot_msgs/parking_lot.h>

namespace parking_lot_msgs
{
template <class ContainerAllocator>
struct parking_lots_
{
  typedef parking_lots_<ContainerAllocator> Type;

  parking_lots_()
    : header()
    , parking_lots()  {
    }
  parking_lots_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , parking_lots(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::parking_lot_msgs::parking_lot_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::parking_lot_msgs::parking_lot_<ContainerAllocator> >::other >  _parking_lots_type;
  _parking_lots_type parking_lots;





  typedef boost::shared_ptr< ::parking_lot_msgs::parking_lots_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::parking_lot_msgs::parking_lots_<ContainerAllocator> const> ConstPtr;

}; // struct parking_lots_

typedef ::parking_lot_msgs::parking_lots_<std::allocator<void> > parking_lots;

typedef boost::shared_ptr< ::parking_lot_msgs::parking_lots > parking_lotsPtr;
typedef boost::shared_ptr< ::parking_lot_msgs::parking_lots const> parking_lotsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::parking_lot_msgs::parking_lots_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::parking_lot_msgs::parking_lots_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::parking_lot_msgs::parking_lots_<ContainerAllocator1> & lhs, const ::parking_lot_msgs::parking_lots_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.parking_lots == rhs.parking_lots;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::parking_lot_msgs::parking_lots_<ContainerAllocator1> & lhs, const ::parking_lot_msgs::parking_lots_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace parking_lot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::parking_lot_msgs::parking_lots_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::parking_lot_msgs::parking_lots_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::parking_lot_msgs::parking_lots_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::parking_lot_msgs::parking_lots_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::parking_lot_msgs::parking_lots_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::parking_lot_msgs::parking_lots_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::parking_lot_msgs::parking_lots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "192e520702045372955648661836b8ae";
  }

  static const char* value(const ::parking_lot_msgs::parking_lots_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x192e520702045372ULL;
  static const uint64_t static_value2 = 0x955648661836b8aeULL;
};

template<class ContainerAllocator>
struct DataType< ::parking_lot_msgs::parking_lots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "parking_lot_msgs/parking_lots";
  }

  static const char* value(const ::parking_lot_msgs::parking_lots_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::parking_lot_msgs::parking_lots_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 全局\n"
"Header header\n"
"parking_lot[] parking_lots\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: parking_lot_msgs/parking_lot\n"
"# 全局\n"
"Header header\n"
"\n"
"# 车辆最终泊进车位时 从上往下看\n"
"geometry_msgs/Point corner_left_upper\n"
"geometry_msgs/Point corner_left_low\n"
"geometry_msgs/Point corner_right_upper\n"
"geometry_msgs/Point corner_right_low\n"
"\n"
"geometry_msgs/Point center           # 方块的中心\n"
"geometry_msgs/Point entrance_center  # 入口边的中心\n"
"\n"
"int8 type  # 0- 垂直  1 - 侧方位 \n"
"int8 is_occupied # 0- 无占据 1- 占据\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::parking_lot_msgs::parking_lots_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::parking_lot_msgs::parking_lots_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.parking_lots);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct parking_lots_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::parking_lot_msgs::parking_lots_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::parking_lot_msgs::parking_lots_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "parking_lots[]" << std::endl;
    for (size_t i = 0; i < v.parking_lots.size(); ++i)
    {
      s << indent << "  parking_lots[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::parking_lot_msgs::parking_lot_<ContainerAllocator> >::stream(s, indent + "    ", v.parking_lots[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PARKING_LOT_MSGS_MESSAGE_PARKING_LOTS_H
